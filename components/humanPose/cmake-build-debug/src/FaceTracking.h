// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FaceTracking.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FaceTracking_h__
#define __FaceTracking_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompFaceTracking
{

class FaceTracking;
class FaceTrackingPrx;

}

namespace RoboCompFaceTracking
{

struct Point
{
    int x;
    int y;

    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(x, y);
    }
};

struct Box
{
    int posx;
    int posy;
    int width;
    int height;

    std::tuple<const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(posx, posy, width, height);
    }
};

struct TFace
{
    int id;
    ::RoboCompFaceTracking::Point centroid;
    ::RoboCompFaceTracking::Box boundingbox;
    bool tracking;

    std::tuple<const int&, const ::RoboCompFaceTracking::Point&, const ::RoboCompFaceTracking::Box&, const bool&> ice_tuple() const
    {
        return std::tie(id, centroid, boundingbox, tracking);
    }
};

using Faces = ::std::vector<::RoboCompFaceTracking::TFace>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompFaceTracking
{

class FaceTracking : public virtual ::Ice::Object
{
public:

    using ProxyType = FaceTrackingPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::RoboCompFaceTracking::Faces getFaces(const ::Ice::Current&) = 0;
    bool _iceD_getFaces(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompFaceTracking
{

class FaceTrackingPrx : public virtual ::Ice::Proxy<FaceTrackingPrx, ::Ice::ObjectPrx>
{
public:

    ::RoboCompFaceTracking::Faces getFaces(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompFaceTracking::Faces>(true, this, &RoboCompFaceTracking::FaceTrackingPrx::_iceI_getFaces, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFacesAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompFaceTracking::Faces>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompFaceTracking::Faces, P>(false, this, &RoboCompFaceTracking::FaceTrackingPrx::_iceI_getFaces, context);
    }

    ::std::function<void()>
    getFacesAsync(::std::function<void(::RoboCompFaceTracking::Faces)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompFaceTracking::Faces>(response, ex, sent, this, &RoboCompFaceTracking::FaceTrackingPrx::_iceI_getFaces, context);
    }

    void _iceI_getFaces(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompFaceTracking::Faces>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    FaceTrackingPrx() = default;
    friend ::std::shared_ptr<FaceTrackingPrx> IceInternal::createProxy<FaceTrackingPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboCompFaceTracking::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompFaceTracking::Point, S>
{
    static void read(S* istr, ::RoboCompFaceTracking::Point& v)
    {
        istr->readAll(v.x, v.y);
    }
};

template<>
struct StreamableTraits<::RoboCompFaceTracking::Box>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompFaceTracking::Box, S>
{
    static void read(S* istr, ::RoboCompFaceTracking::Box& v)
    {
        istr->readAll(v.posx, v.posy, v.width, v.height);
    }
};

template<>
struct StreamableTraits<::RoboCompFaceTracking::TFace>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 29;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompFaceTracking::TFace, S>
{
    static void read(S* istr, ::RoboCompFaceTracking::TFace& v)
    {
        istr->readAll(v.id, v.centroid, v.boundingbox, v.tracking);
    }
};

}

namespace RoboCompFaceTracking
{

using FaceTrackingPtr = ::std::shared_ptr<FaceTracking>;
using FaceTrackingPrxPtr = ::std::shared_ptr<FaceTrackingPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompFaceTracking
{

class FaceTracking;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompFaceTracking::FaceTracking>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompFaceTracking::FaceTracking*);

}

}

namespace RoboCompFaceTracking
{

class FaceTracking;
::Ice::Object* upCast(::RoboCompFaceTracking::FaceTracking*);
typedef ::IceInternal::Handle< ::RoboCompFaceTracking::FaceTracking> FaceTrackingPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompFaceTracking::FaceTracking> FaceTrackingPrx;
typedef FaceTrackingPrx FaceTrackingPrxPtr;
void _icePatchObjectPtr(FaceTrackingPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompFaceTracking
{

struct Point
{
    ::Ice::Int x;
    ::Ice::Int y;

    bool operator==(const Point& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(x != rhs_.x)
        {
            return false;
        }
        if(y != rhs_.y)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(x < rhs_.x)
        {
            return true;
        }
        else if(rhs_.x < x)
        {
            return false;
        }
        if(y < rhs_.y)
        {
            return true;
        }
        else if(rhs_.y < y)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Point& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Point& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Point& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct Box
{
    ::Ice::Int posx;
    ::Ice::Int posy;
    ::Ice::Int width;
    ::Ice::Int height;

    bool operator==(const Box& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(posx != rhs_.posx)
        {
            return false;
        }
        if(posy != rhs_.posy)
        {
            return false;
        }
        if(width != rhs_.width)
        {
            return false;
        }
        if(height != rhs_.height)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Box& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(posx < rhs_.posx)
        {
            return true;
        }
        else if(rhs_.posx < posx)
        {
            return false;
        }
        if(posy < rhs_.posy)
        {
            return true;
        }
        else if(rhs_.posy < posy)
        {
            return false;
        }
        if(width < rhs_.width)
        {
            return true;
        }
        else if(rhs_.width < width)
        {
            return false;
        }
        if(height < rhs_.height)
        {
            return true;
        }
        else if(rhs_.height < height)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Box& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Box& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Box& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Box& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct TFace
{
    ::Ice::Int id;
    ::RoboCompFaceTracking::Point centroid;
    ::RoboCompFaceTracking::Box boundingbox;
    bool tracking;

    bool operator==(const TFace& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(centroid != rhs_.centroid)
        {
            return false;
        }
        if(boundingbox != rhs_.boundingbox)
        {
            return false;
        }
        if(tracking != rhs_.tracking)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TFace& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(centroid < rhs_.centroid)
        {
            return true;
        }
        else if(rhs_.centroid < centroid)
        {
            return false;
        }
        if(boundingbox < rhs_.boundingbox)
        {
            return true;
        }
        else if(rhs_.boundingbox < boundingbox)
        {
            return false;
        }
        if(tracking < rhs_.tracking)
        {
            return true;
        }
        else if(rhs_.tracking < tracking)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TFace& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TFace& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TFace& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TFace& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompFaceTracking::TFace> Faces;

}

namespace RoboCompFaceTracking
{

class Callback_FaceTracking_getFaces_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FaceTracking_getFaces_Base> Callback_FaceTracking_getFacesPtr;

}

namespace IceProxy
{

namespace RoboCompFaceTracking
{

class FaceTracking : public virtual ::Ice::Proxy<FaceTracking, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompFaceTracking::Faces getFaces(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getFaces(_iceI_begin_getFaces(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getFaces(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFaces(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFaces(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::RoboCompFaceTracking::Callback_FaceTracking_getFacesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFaces(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFaces(const ::Ice::Context& context, const ::RoboCompFaceTracking::Callback_FaceTracking_getFacesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFaces(context, del, cookie);
    }

    ::RoboCompFaceTracking::Faces end_getFaces(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getFaces(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompFaceTracking
{

class FaceTracking : public virtual ::Ice::Object
{
public:

    typedef FaceTrackingPrx ProxyType;
    typedef FaceTrackingPtr PointerType;

    virtual ~FaceTracking();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::RoboCompFaceTracking::Faces getFaces(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getFaces(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const FaceTracking& lhs, const FaceTracking& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const FaceTracking& lhs, const FaceTracking& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompFaceTracking::Point>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompFaceTracking::Point, S>
{
    static void write(S* ostr, const ::RoboCompFaceTracking::Point& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
    }
};

template<typename S>
struct StreamReader< ::RoboCompFaceTracking::Point, S>
{
    static void read(S* istr, ::RoboCompFaceTracking::Point& v)
    {
        istr->read(v.x);
        istr->read(v.y);
    }
};

template<>
struct StreamableTraits< ::RoboCompFaceTracking::Box>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompFaceTracking::Box, S>
{
    static void write(S* ostr, const ::RoboCompFaceTracking::Box& v)
    {
        ostr->write(v.posx);
        ostr->write(v.posy);
        ostr->write(v.width);
        ostr->write(v.height);
    }
};

template<typename S>
struct StreamReader< ::RoboCompFaceTracking::Box, S>
{
    static void read(S* istr, ::RoboCompFaceTracking::Box& v)
    {
        istr->read(v.posx);
        istr->read(v.posy);
        istr->read(v.width);
        istr->read(v.height);
    }
};

template<>
struct StreamableTraits< ::RoboCompFaceTracking::TFace>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 29;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompFaceTracking::TFace, S>
{
    static void write(S* ostr, const ::RoboCompFaceTracking::TFace& v)
    {
        ostr->write(v.id);
        ostr->write(v.centroid);
        ostr->write(v.boundingbox);
        ostr->write(v.tracking);
    }
};

template<typename S>
struct StreamReader< ::RoboCompFaceTracking::TFace, S>
{
    static void read(S* istr, ::RoboCompFaceTracking::TFace& v)
    {
        istr->read(v.id);
        istr->read(v.centroid);
        istr->read(v.boundingbox);
        istr->read(v.tracking);
    }
};

}

namespace RoboCompFaceTracking
{

template<class T>
class CallbackNC_FaceTracking_getFaces : public Callback_FaceTracking_getFaces_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompFaceTracking::Faces&);

    CallbackNC_FaceTracking_getFaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompFaceTracking::FaceTrackingPrx proxy = ::RoboCompFaceTracking::FaceTrackingPrx::uncheckedCast(result->getProxy());
        ::RoboCompFaceTracking::Faces ret;
        try
        {
            ret = proxy->end_getFaces(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_FaceTracking_getFacesPtr
newCallback_FaceTracking_getFaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFaceTracking::Faces&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FaceTracking_getFaces<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FaceTracking_getFacesPtr
newCallback_FaceTracking_getFaces(T* instance, void (T::*cb)(const ::RoboCompFaceTracking::Faces&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FaceTracking_getFaces<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FaceTracking_getFaces : public Callback_FaceTracking_getFaces_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompFaceTracking::Faces&, const CT&);

    Callback_FaceTracking_getFaces(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompFaceTracking::FaceTrackingPrx proxy = ::RoboCompFaceTracking::FaceTrackingPrx::uncheckedCast(result->getProxy());
        ::RoboCompFaceTracking::Faces ret;
        try
        {
            ret = proxy->end_getFaces(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_FaceTracking_getFacesPtr
newCallback_FaceTracking_getFaces(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompFaceTracking::Faces&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FaceTracking_getFaces<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FaceTracking_getFacesPtr
newCallback_FaceTracking_getFaces(T* instance, void (T::*cb)(const ::RoboCompFaceTracking::Faces&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FaceTracking_getFaces<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
