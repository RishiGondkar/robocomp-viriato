// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `HumanTracker.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __HumanTracker_h__
#define __HumanTracker_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompHumanTracker
{

class HumanTracker;
class HumanTrackerPrx;

}

namespace RoboCompHumanTracker
{

enum class TrackingState : unsigned char
{
    NotTracking,
    TrackingLost,
    TrackingStarted,
    Tracking
};

using RTMatrix = ::std::vector<float>;

using RTMatrixList = ::std::map<::std::string, ::RoboCompHumanTracker::RTMatrix>;

using joint = ::std::vector<float>;

using jointListType = ::std::map<::std::string, ::RoboCompHumanTracker::joint>;

struct TPerson
{
    ::RoboCompHumanTracker::TrackingState state;
    ::RoboCompHumanTracker::jointListType joints;
    ::RoboCompHumanTracker::RTMatrixList rotations;

    std::tuple<const ::RoboCompHumanTracker::TrackingState&, const ::RoboCompHumanTracker::jointListType&, const ::RoboCompHumanTracker::RTMatrixList&> ice_tuple() const
    {
        return std::tie(state, joints, rotations);
    }
};

using PersonList = ::std::map<int, ::RoboCompHumanTracker::TPerson>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompHumanTracker
{

class HumanTracker : public virtual ::Ice::Object
{
public:

    using ProxyType = HumanTrackerPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void getJointsPosition(int, ::RoboCompHumanTracker::jointListType&, const ::Ice::Current&) = 0;
    bool _iceD_getJointsPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRTMatrixList(int, ::RoboCompHumanTracker::RTMatrixList&, const ::Ice::Current&) = 0;
    bool _iceD_getRTMatrixList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUserState(int, ::RoboCompHumanTracker::TrackingState&, const ::Ice::Current&) = 0;
    bool _iceD_getUserState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUser(int, ::RoboCompHumanTracker::TPerson&, const ::Ice::Current&) = 0;
    bool _iceD_getUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUsersList(::RoboCompHumanTracker::PersonList&, const ::Ice::Current&) = 0;
    bool _iceD_getUsersList(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetJointDepthPositionResult
    {
        bool returnValue;
        ::RoboCompHumanTracker::joint depthjoint;
    };

    virtual bool getJointDepthPosition(int, ::std::string, ::RoboCompHumanTracker::joint&, const ::Ice::Current&) = 0;
    bool _iceD_getJointDepthPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompHumanTracker
{

class HumanTrackerPrx : public virtual ::Ice::Proxy<HumanTrackerPrx, ::Ice::ObjectPrx>
{
public:

    void getJointsPosition(int iceP_id, ::RoboCompHumanTracker::jointListType& iceP_jointList, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_jointList = _makePromiseOutgoing<::RoboCompHumanTracker::jointListType>(true, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getJointsPosition, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getJointsPositionAsync(int iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanTracker::jointListType>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanTracker::jointListType, P>(false, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getJointsPosition, iceP_id, context);
    }

    ::std::function<void()>
    getJointsPositionAsync(int iceP_id,
                           ::std::function<void(::RoboCompHumanTracker::jointListType)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompHumanTracker::jointListType>(response, ex, sent, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getJointsPosition, iceP_id, context);
    }

    void _iceI_getJointsPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanTracker::jointListType>>&, int, const ::Ice::Context&);

    void getRTMatrixList(int iceP_id, ::RoboCompHumanTracker::RTMatrixList& iceP_RTMatList, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_RTMatList = _makePromiseOutgoing<::RoboCompHumanTracker::RTMatrixList>(true, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getRTMatrixList, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRTMatrixListAsync(int iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanTracker::RTMatrixList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanTracker::RTMatrixList, P>(false, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getRTMatrixList, iceP_id, context);
    }

    ::std::function<void()>
    getRTMatrixListAsync(int iceP_id,
                         ::std::function<void(::RoboCompHumanTracker::RTMatrixList)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompHumanTracker::RTMatrixList>(response, ex, sent, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getRTMatrixList, iceP_id, context);
    }

    void _iceI_getRTMatrixList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanTracker::RTMatrixList>>&, int, const ::Ice::Context&);

    void getUserState(int iceP_id, ::RoboCompHumanTracker::TrackingState& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_state = _makePromiseOutgoing<::RoboCompHumanTracker::TrackingState>(true, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUserState, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUserStateAsync(int iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanTracker::TrackingState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanTracker::TrackingState, P>(false, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUserState, iceP_id, context);
    }

    ::std::function<void()>
    getUserStateAsync(int iceP_id,
                      ::std::function<void(::RoboCompHumanTracker::TrackingState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompHumanTracker::TrackingState>(response, ex, sent, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUserState, iceP_id, context);
    }

    void _iceI_getUserState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanTracker::TrackingState>>&, int, const ::Ice::Context&);

    void getUser(int iceP_id, ::RoboCompHumanTracker::TPerson& iceP_user, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_user = _makePromiseOutgoing<::RoboCompHumanTracker::TPerson>(true, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUser, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUserAsync(int iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanTracker::TPerson>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanTracker::TPerson, P>(false, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUser, iceP_id, context);
    }

    ::std::function<void()>
    getUserAsync(int iceP_id,
                 ::std::function<void(::RoboCompHumanTracker::TPerson)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompHumanTracker::TPerson>(response, ex, sent, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUser, iceP_id, context);
    }

    void _iceI_getUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanTracker::TPerson>>&, int, const ::Ice::Context&);

    void getUsersList(::RoboCompHumanTracker::PersonList& iceP_users, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_users = _makePromiseOutgoing<::RoboCompHumanTracker::PersonList>(true, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUsersList, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUsersListAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanTracker::PersonList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanTracker::PersonList, P>(false, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUsersList, context);
    }

    ::std::function<void()>
    getUsersListAsync(::std::function<void(::RoboCompHumanTracker::PersonList)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompHumanTracker::PersonList>(response, ex, sent, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getUsersList, context);
    }

    void _iceI_getUsersList(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanTracker::PersonList>>&, const ::Ice::Context&);

    bool getJointDepthPosition(int iceP_idperson, const ::std::string& iceP_idjoint, ::RoboCompHumanTracker::joint& iceP_depthjoint, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompHumanTracker::HumanTracker::GetJointDepthPositionResult>(true, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getJointDepthPosition, iceP_idperson, iceP_idjoint, context).get();
        iceP_depthjoint = ::std::move(result.depthjoint);
        return result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto getJointDepthPositionAsync(int iceP_idperson, const ::std::string& iceP_idjoint, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompHumanTracker::HumanTracker::GetJointDepthPositionResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompHumanTracker::HumanTracker::GetJointDepthPositionResult, P>(false, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getJointDepthPosition, iceP_idperson, iceP_idjoint, context);
    }

    ::std::function<void()>
    getJointDepthPositionAsync(int iceP_idperson, const ::std::string& iceP_idjoint,
                               ::std::function<void(bool, ::RoboCompHumanTracker::joint)> response,
                               ::std::function<void(::std::exception_ptr)> ex = nullptr,
                               ::std::function<void(bool)> sent = nullptr,
                               const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompHumanTracker::HumanTracker::GetJointDepthPositionResult&& result)
        {
            response(result.returnValue, ::std::move(result.depthjoint));
        };
        return _makeLamdaOutgoing<::RoboCompHumanTracker::HumanTracker::GetJointDepthPositionResult>(responseCb, ex, sent, this, &RoboCompHumanTracker::HumanTrackerPrx::_iceI_getJointDepthPosition, iceP_idperson, iceP_idjoint, context);
    }

    void _iceI_getJointDepthPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompHumanTracker::HumanTracker::GetJointDepthPositionResult>>&, int, const ::std::string&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    HumanTrackerPrx() = default;
    friend ::std::shared_ptr<HumanTrackerPrx> IceInternal::createProxy<HumanTrackerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompHumanTracker::TrackingState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::RoboCompHumanTracker::TPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompHumanTracker::TPerson, S>
{
    static void read(S* istr, ::RoboCompHumanTracker::TPerson& v)
    {
        istr->readAll(v.state, v.joints, v.rotations);
    }
};

}

namespace RoboCompHumanTracker
{

using HumanTrackerPtr = ::std::shared_ptr<HumanTracker>;
using HumanTrackerPrxPtr = ::std::shared_ptr<HumanTrackerPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompHumanTracker
{

class HumanTracker;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompHumanTracker::HumanTracker>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompHumanTracker::HumanTracker*);

}

}

namespace RoboCompHumanTracker
{

class HumanTracker;
::Ice::Object* upCast(::RoboCompHumanTracker::HumanTracker*);
typedef ::IceInternal::Handle< ::RoboCompHumanTracker::HumanTracker> HumanTrackerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompHumanTracker::HumanTracker> HumanTrackerPrx;
typedef HumanTrackerPrx HumanTrackerPrxPtr;
void _icePatchObjectPtr(HumanTrackerPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompHumanTracker
{

enum TrackingState
{
    NotTracking,
    TrackingLost,
    TrackingStarted,
    Tracking
};

typedef ::std::vector< ::Ice::Float> RTMatrix;

typedef ::std::map< ::std::string, ::RoboCompHumanTracker::RTMatrix> RTMatrixList;

typedef ::std::vector< ::Ice::Float> joint;

typedef ::std::map< ::std::string, ::RoboCompHumanTracker::joint> jointListType;

struct TPerson
{
    ::RoboCompHumanTracker::TrackingState state;
    ::RoboCompHumanTracker::jointListType joints;
    ::RoboCompHumanTracker::RTMatrixList rotations;
};

typedef ::std::map< ::Ice::Int, ::RoboCompHumanTracker::TPerson> PersonList;

}

namespace RoboCompHumanTracker
{

class Callback_HumanTracker_getJointsPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanTracker_getJointsPosition_Base> Callback_HumanTracker_getJointsPositionPtr;

class Callback_HumanTracker_getRTMatrixList_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanTracker_getRTMatrixList_Base> Callback_HumanTracker_getRTMatrixListPtr;

class Callback_HumanTracker_getUserState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanTracker_getUserState_Base> Callback_HumanTracker_getUserStatePtr;

class Callback_HumanTracker_getUser_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanTracker_getUser_Base> Callback_HumanTracker_getUserPtr;

class Callback_HumanTracker_getUsersList_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanTracker_getUsersList_Base> Callback_HumanTracker_getUsersListPtr;

class Callback_HumanTracker_getJointDepthPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_HumanTracker_getJointDepthPosition_Base> Callback_HumanTracker_getJointDepthPositionPtr;

}

namespace IceProxy
{

namespace RoboCompHumanTracker
{

class HumanTracker : public virtual ::Ice::Proxy<HumanTracker, ::IceProxy::Ice::Object>
{
public:

    void getJointsPosition(::Ice::Int iceP_id, ::RoboCompHumanTracker::jointListType& iceP_jointList, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getJointsPosition(iceP_jointList, _iceI_begin_getJointsPosition(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getJointsPosition(::Ice::Int iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getJointsPosition(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJointsPosition(::Ice::Int iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsPosition(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointsPosition(::Ice::Int iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsPosition(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointsPosition(::Ice::Int iceP_id, const ::RoboCompHumanTracker::Callback_HumanTracker_getJointsPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsPosition(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointsPosition(::Ice::Int iceP_id, const ::Ice::Context& context, const ::RoboCompHumanTracker::Callback_HumanTracker_getJointsPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointsPosition(iceP_id, context, del, cookie);
    }

    void end_getJointsPosition(::RoboCompHumanTracker::jointListType& iceP_jointList, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getJointsPosition(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getRTMatrixList(::Ice::Int iceP_id, ::RoboCompHumanTracker::RTMatrixList& iceP_RTMatList, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getRTMatrixList(iceP_RTMatList, _iceI_begin_getRTMatrixList(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRTMatrixList(::Ice::Int iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRTMatrixList(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRTMatrixList(::Ice::Int iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRTMatrixList(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRTMatrixList(::Ice::Int iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRTMatrixList(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRTMatrixList(::Ice::Int iceP_id, const ::RoboCompHumanTracker::Callback_HumanTracker_getRTMatrixListPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRTMatrixList(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRTMatrixList(::Ice::Int iceP_id, const ::Ice::Context& context, const ::RoboCompHumanTracker::Callback_HumanTracker_getRTMatrixListPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRTMatrixList(iceP_id, context, del, cookie);
    }

    void end_getRTMatrixList(::RoboCompHumanTracker::RTMatrixList& iceP_RTMatList, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRTMatrixList(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getUserState(::Ice::Int iceP_id, ::RoboCompHumanTracker::TrackingState& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getUserState(iceP_state, _iceI_begin_getUserState(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUserState(::Ice::Int iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUserState(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUserState(::Ice::Int iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserState(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserState(::Ice::Int iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserState(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserState(::Ice::Int iceP_id, const ::RoboCompHumanTracker::Callback_HumanTracker_getUserStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserState(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserState(::Ice::Int iceP_id, const ::Ice::Context& context, const ::RoboCompHumanTracker::Callback_HumanTracker_getUserStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserState(iceP_id, context, del, cookie);
    }

    void end_getUserState(::RoboCompHumanTracker::TrackingState& iceP_state, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUserState(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getUser(::Ice::Int iceP_id, ::RoboCompHumanTracker::TPerson& iceP_user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getUser(iceP_user, _iceI_begin_getUser(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUser(::Ice::Int iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUser(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUser(::Ice::Int iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUser(::Ice::Int iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUser(::Ice::Int iceP_id, const ::RoboCompHumanTracker::Callback_HumanTracker_getUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUser(::Ice::Int iceP_id, const ::Ice::Context& context, const ::RoboCompHumanTracker::Callback_HumanTracker_getUserPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUser(iceP_id, context, del, cookie);
    }

    void end_getUser(::RoboCompHumanTracker::TPerson& iceP_user, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUser(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getUsersList(::RoboCompHumanTracker::PersonList& iceP_users, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getUsersList(iceP_users, _iceI_begin_getUsersList(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUsersList(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUsersList(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsersList(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsersList(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsersList(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsersList(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsersList(const ::RoboCompHumanTracker::Callback_HumanTracker_getUsersListPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsersList(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsersList(const ::Ice::Context& context, const ::RoboCompHumanTracker::Callback_HumanTracker_getUsersListPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUsersList(context, del, cookie);
    }

    void end_getUsersList(::RoboCompHumanTracker::PersonList& iceP_users, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUsersList(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool getJointDepthPosition(::Ice::Int iceP_idperson, const ::std::string& iceP_idjoint, ::RoboCompHumanTracker::joint& iceP_depthjoint, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getJointDepthPosition(iceP_depthjoint, _iceI_begin_getJointDepthPosition(iceP_idperson, iceP_idjoint, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getJointDepthPosition(::Ice::Int iceP_idperson, const ::std::string& iceP_idjoint, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getJointDepthPosition(iceP_idperson, iceP_idjoint, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getJointDepthPosition(::Ice::Int iceP_idperson, const ::std::string& iceP_idjoint, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointDepthPosition(iceP_idperson, iceP_idjoint, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointDepthPosition(::Ice::Int iceP_idperson, const ::std::string& iceP_idjoint, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointDepthPosition(iceP_idperson, iceP_idjoint, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointDepthPosition(::Ice::Int iceP_idperson, const ::std::string& iceP_idjoint, const ::RoboCompHumanTracker::Callback_HumanTracker_getJointDepthPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointDepthPosition(iceP_idperson, iceP_idjoint, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getJointDepthPosition(::Ice::Int iceP_idperson, const ::std::string& iceP_idjoint, const ::Ice::Context& context, const ::RoboCompHumanTracker::Callback_HumanTracker_getJointDepthPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getJointDepthPosition(iceP_idperson, iceP_idjoint, context, del, cookie);
    }

    bool end_getJointDepthPosition(::RoboCompHumanTracker::joint& iceP_depthjoint, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getJointDepthPosition(::Ice::Int, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompHumanTracker
{

class HumanTracker : public virtual ::Ice::Object
{
public:

    typedef HumanTrackerPrx ProxyType;
    typedef HumanTrackerPtr PointerType;

    virtual ~HumanTracker();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void getJointsPosition(::Ice::Int, ::RoboCompHumanTracker::jointListType&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getJointsPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRTMatrixList(::Ice::Int, ::RoboCompHumanTracker::RTMatrixList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getRTMatrixList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUserState(::Ice::Int, ::RoboCompHumanTracker::TrackingState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getUserState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUser(::Ice::Int, ::RoboCompHumanTracker::TPerson&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getUsersList(::RoboCompHumanTracker::PersonList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getUsersList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getJointDepthPosition(::Ice::Int, const ::std::string&, ::RoboCompHumanTracker::joint&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getJointDepthPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const HumanTracker& lhs, const HumanTracker& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const HumanTracker& lhs, const HumanTracker& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompHumanTracker::TrackingState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompHumanTracker::TPerson>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompHumanTracker::TPerson, S>
{
    static void write(S* ostr, const ::RoboCompHumanTracker::TPerson& v)
    {
        ostr->write(v.state);
        ostr->write(v.joints);
        ostr->write(v.rotations);
    }
};

template<typename S>
struct StreamReader< ::RoboCompHumanTracker::TPerson, S>
{
    static void read(S* istr, ::RoboCompHumanTracker::TPerson& v)
    {
        istr->read(v.state);
        istr->read(v.joints);
        istr->read(v.rotations);
    }
};

}

namespace RoboCompHumanTracker
{

template<class T>
class CallbackNC_HumanTracker_getJointsPosition : public Callback_HumanTracker_getJointsPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::jointListType&);

    CallbackNC_HumanTracker_getJointsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::jointListType iceP_jointList;
        try
        {
            proxy->end_getJointsPosition(iceP_jointList, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_jointList);
        }
    }

private:

    Response _response;
};

template<class T> Callback_HumanTracker_getJointsPositionPtr
newCallback_HumanTracker_getJointsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::jointListType&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getJointsPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_HumanTracker_getJointsPositionPtr
newCallback_HumanTracker_getJointsPosition(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::jointListType&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getJointsPosition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_HumanTracker_getJointsPosition : public Callback_HumanTracker_getJointsPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::jointListType&, const CT&);

    Callback_HumanTracker_getJointsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::jointListType iceP_jointList;
        try
        {
            proxy->end_getJointsPosition(iceP_jointList, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_jointList, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_HumanTracker_getJointsPositionPtr
newCallback_HumanTracker_getJointsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::jointListType&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getJointsPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_HumanTracker_getJointsPositionPtr
newCallback_HumanTracker_getJointsPosition(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::jointListType&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getJointsPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_HumanTracker_getRTMatrixList : public Callback_HumanTracker_getRTMatrixList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::RTMatrixList&);

    CallbackNC_HumanTracker_getRTMatrixList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::RTMatrixList iceP_RTMatList;
        try
        {
            proxy->end_getRTMatrixList(iceP_RTMatList, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_RTMatList);
        }
    }

private:

    Response _response;
};

template<class T> Callback_HumanTracker_getRTMatrixListPtr
newCallback_HumanTracker_getRTMatrixList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::RTMatrixList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getRTMatrixList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_HumanTracker_getRTMatrixListPtr
newCallback_HumanTracker_getRTMatrixList(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::RTMatrixList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getRTMatrixList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_HumanTracker_getRTMatrixList : public Callback_HumanTracker_getRTMatrixList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::RTMatrixList&, const CT&);

    Callback_HumanTracker_getRTMatrixList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::RTMatrixList iceP_RTMatList;
        try
        {
            proxy->end_getRTMatrixList(iceP_RTMatList, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_RTMatList, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_HumanTracker_getRTMatrixListPtr
newCallback_HumanTracker_getRTMatrixList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::RTMatrixList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getRTMatrixList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_HumanTracker_getRTMatrixListPtr
newCallback_HumanTracker_getRTMatrixList(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::RTMatrixList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getRTMatrixList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_HumanTracker_getUserState : public Callback_HumanTracker_getUserState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::RoboCompHumanTracker::TrackingState);

    CallbackNC_HumanTracker_getUserState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::TrackingState iceP_state;
        try
        {
            proxy->end_getUserState(iceP_state, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_state);
        }
    }

private:

    Response _response;
};

template<class T> Callback_HumanTracker_getUserStatePtr
newCallback_HumanTracker_getUserState(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompHumanTracker::TrackingState), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getUserState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_HumanTracker_getUserStatePtr
newCallback_HumanTracker_getUserState(T* instance, void (T::*cb)(::RoboCompHumanTracker::TrackingState), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getUserState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_HumanTracker_getUserState : public Callback_HumanTracker_getUserState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::RoboCompHumanTracker::TrackingState, const CT&);

    Callback_HumanTracker_getUserState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::TrackingState iceP_state;
        try
        {
            proxy->end_getUserState(iceP_state, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_state, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_HumanTracker_getUserStatePtr
newCallback_HumanTracker_getUserState(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompHumanTracker::TrackingState, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getUserState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_HumanTracker_getUserStatePtr
newCallback_HumanTracker_getUserState(T* instance, void (T::*cb)(::RoboCompHumanTracker::TrackingState, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getUserState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_HumanTracker_getUser : public Callback_HumanTracker_getUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::TPerson&);

    CallbackNC_HumanTracker_getUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::TPerson iceP_user;
        try
        {
            proxy->end_getUser(iceP_user, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_user);
        }
    }

private:

    Response _response;
};

template<class T> Callback_HumanTracker_getUserPtr
newCallback_HumanTracker_getUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::TPerson&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_HumanTracker_getUserPtr
newCallback_HumanTracker_getUser(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::TPerson&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_HumanTracker_getUser : public Callback_HumanTracker_getUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::TPerson&, const CT&);

    Callback_HumanTracker_getUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::TPerson iceP_user;
        try
        {
            proxy->end_getUser(iceP_user, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_user, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_HumanTracker_getUserPtr
newCallback_HumanTracker_getUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::TPerson&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_HumanTracker_getUserPtr
newCallback_HumanTracker_getUser(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::TPerson&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_HumanTracker_getUsersList : public Callback_HumanTracker_getUsersList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::PersonList&);

    CallbackNC_HumanTracker_getUsersList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::PersonList iceP_users;
        try
        {
            proxy->end_getUsersList(iceP_users, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_users);
        }
    }

private:

    Response _response;
};

template<class T> Callback_HumanTracker_getUsersListPtr
newCallback_HumanTracker_getUsersList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::PersonList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getUsersList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_HumanTracker_getUsersListPtr
newCallback_HumanTracker_getUsersList(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::PersonList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getUsersList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_HumanTracker_getUsersList : public Callback_HumanTracker_getUsersList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompHumanTracker::PersonList&, const CT&);

    Callback_HumanTracker_getUsersList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::PersonList iceP_users;
        try
        {
            proxy->end_getUsersList(iceP_users, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_users, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_HumanTracker_getUsersListPtr
newCallback_HumanTracker_getUsersList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompHumanTracker::PersonList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getUsersList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_HumanTracker_getUsersListPtr
newCallback_HumanTracker_getUsersList(T* instance, void (T::*cb)(const ::RoboCompHumanTracker::PersonList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getUsersList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_HumanTracker_getJointDepthPosition : public Callback_HumanTracker_getJointDepthPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::RoboCompHumanTracker::joint&);

    CallbackNC_HumanTracker_getJointDepthPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::joint iceP_depthjoint;
        bool ret;
        try
        {
            ret = proxy->end_getJointDepthPosition(iceP_depthjoint, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_depthjoint);
        }
    }

private:

    Response _response;
};

template<class T> Callback_HumanTracker_getJointDepthPositionPtr
newCallback_HumanTracker_getJointDepthPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompHumanTracker::joint&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getJointDepthPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_HumanTracker_getJointDepthPositionPtr
newCallback_HumanTracker_getJointDepthPosition(T* instance, void (T::*cb)(bool, const ::RoboCompHumanTracker::joint&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_HumanTracker_getJointDepthPosition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_HumanTracker_getJointDepthPosition : public Callback_HumanTracker_getJointDepthPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::RoboCompHumanTracker::joint&, const CT&);

    Callback_HumanTracker_getJointDepthPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompHumanTracker::HumanTrackerPrx proxy = ::RoboCompHumanTracker::HumanTrackerPrx::uncheckedCast(result->getProxy());
        ::RoboCompHumanTracker::joint iceP_depthjoint;
        bool ret;
        try
        {
            ret = proxy->end_getJointDepthPosition(iceP_depthjoint, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_depthjoint, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_HumanTracker_getJointDepthPositionPtr
newCallback_HumanTracker_getJointDepthPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::RoboCompHumanTracker::joint&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getJointDepthPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_HumanTracker_getJointDepthPositionPtr
newCallback_HumanTracker_getJointDepthPosition(T* instance, void (T::*cb)(bool, const ::RoboCompHumanTracker::joint&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_HumanTracker_getJointDepthPosition<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
